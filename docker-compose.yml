services:
  # Next.js Frontend (Now Full Stack)
  frontend:
    build:
      context: ./frontend # Context is the frontend directory
      dockerfile: Dockerfile # Dockerfile is directly in ./frontend
    container_name: coderoster-frontend
    restart: unless-stopped
    ports:
      - "3000:3000" # Host port 3000 maps to container port 3000
    volumes:
      - ./frontend:/app # Mount local frontend code
      - /app/node_modules # Anonymous volume to prevent local node_modules overwriting container's
      - /app/.next # Persist .next folder
    environment:
      NODE_ENV: development # For development with hot-reloading
      DATABASE_URL: "postgresql://${DB_USERNAME:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_DATABASE:-code_roster}?schema=public"
      # WORKOS variables (should be in a root .env file for docker-compose)
      WORKOS_CLIENT_ID: "${WORKOS_CLIENT_ID}"
      WORKOS_API_KEY: "${WORKOS_API_KEY}"
      WORKOS_AUTH_REDIRECT_URI: "${WORKOS_AUTH_REDIRECT_URI:-http://localhost:3000/auth/callback}"
      WORKOS_COOKIE_PASSWORD: "${WORKOS_COOKIE_PASSWORD}"
      NEXT_PUBLIC_LOGIN_URL: "${NEXT_PUBLIC_LOGIN_URL:-/auth/login}"
    depends_on:
      - db # Depends on the database service

  # PostgreSQL Database
  db:
    image: postgres:15-alpine # Or your preferred version
    container_name: coderoster-db
    restart: unless-stopped
    ports:
      - "54321:5432" # Host port 54321 maps to container port 5432
    environment:
      POSTGRES_DB: "${DB_DATABASE:-code_roster}"
      POSTGRES_USER: "${DB_USERNAME:-postgres}"
      POSTGRES_PASSWORD: "${DB_PASSWORD:-postgres}"
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist database data

volumes:
  postgres_data: # Defines the named volume for PostgreSQL data 